#
# DEFAULT_BACKEND defines the default target. SUPPORTED_BACKENDS defines all
# targets that will be compiled in. Each target should be one of the following:
#
# The targets starting with GL_ are OpenGL 3.0+ targets, for high-performance
# devices such as PCs, includes shadow volumes, shadow mapping and HDR
# rendering support.
# 
# GL_GLFW
#               Should be compatible with different window systems and OSes
#               as long as GLFW is supported.
# GL_X11
#		OpenGL 3.0+ in raw X11 environment (full-screen handling is
#		better than with the standard version of GLFW). Currently
#               requires freeglut in order to properly initialize GLEW.
# GL_FREEGLUT
#               OpenGL 3.0+ using freeglut, which has proper full-screen
#               support.
# GL_GLUT
#               OpenGL 3.0+ using GLUT. There is no user input support at
#               all. GL_FREEGLUT and GL_GLUT are mutually exclusive (i.e.
#               just use freeglut only).
#
# The targets starting with GLES2_ are OpenGL ES2.0 targets. Single-pass
# rendering is recommended, although shadow volumes are supported. The
# framebuffer targets have limited input support (no keyboard).
#
# GLES2_X11
#               OpenGL ES2.0 using X11 EGL/GLES2 libraries. Tested on
#               Allwinner based-devices (Mali-400).
# GLES2_ALLWINNER_MALI_FB
#               Framebuffer EGL/GLES2 libraries on Allwinner A1x/A20-based
#               devices.
# GLES2_RPI_FB
#               Raspberry Pi framebuffer with VideoCore EGL/GLES2 libraries.
#
# The target settings affects the back-end and demo, the library (libsre) is
# affected only by GLES2 vs GL (it is compiled either for OpenGL-ES2.0 or
# full OpenGL). GL and GLES2 targets cannot be mixed in SUPPORTED_BACKENDS.
#
# SUPPORTED_BACKENDS should include at least the target from DEFAULT_BACKEND.

DEFAULT_BACKEND = GL_X11
SUPPORTED_BACKENDS = GL_X11

# WINDOW_WIDTH and WINDOW_HEIGHT defines the default window size for all
# targets except the OpenGL-ES2.0 framebuffer platforms, which always use
# the current full-screen video mode resolution. This affects only the
# back-end and demo program.

WINDOW_WIDTH = 1024
WINDOW_HEIGHT = 576

# MULTI_SAMPLE_AA defines whether Multi-Sample Anti-Aliasing is enabled by
# default. The number of samples is four. To enable, set the value to 4.
# To disable, set it to 0 or any other value. MSAA is currently supported
# on all targets. This settings only affects the back-end/demo.

MULTI_SAMPLE_AA = 4

# MULTIPLE_LIGHTS determines whether multi-pass rendering with multiple
# lights is enabled in the demos at start-up. The setting can be manually
# changed while running.
#
# On OpenGL platforms, MULTIPLE_LIGHTS is enabled by default unless its
# value is set to NO.
#
# On GLES2 platforms, MULTIPLE_LIGHTS is disabled by default on start up
# unless its value is set to YES. The GLES2 platforms support multiple
# lights (multi-pass rendering), but performance is likely to be poor
# in most cases and rendering may not be correct. Single-pass rendering
# is recommended.
#
# This only affects the demo program.

MULTIPLE_LIGHTS =

# COMPRESS_COLOR_ATTRIBUTE determines whether when an object has a fixed color
# associated with each vertex (the SRE_OBJECT_MULTI_COLOR flag is set for
# the object), the color attribute RGB vaues are compressed into a single
# float shader attribute (sufficient for 8-bit component resolution), rather
# than being stored as a vector of three floats (with high component
# precision).
#
# Allowed values are YES or NO. The default setting is yes.

COMPRESS_COLOR_ATTRIBUTE = YES

# USE_REFLECTION_VECTOR_GLES2 to use more accurate reflection vector-based
# specular lighting calculations instead of using the half-way vector when
# using GLES2 platforms. Use of the reflection vector is always enabled on
# OpenGL platforms.
#
# Allowed values are YES or NO. The default setting is NO.

USE_REFLECTION_VECTOR_GLES2 = NO

# DIRECTIONAL_LIGHT_SPILL_OVER_FACTOR defines the amount of unphysical
# illumination in terms of dot product of the hypothetical angle between
# light and the surface normal that falls on the dark (shadow) side of an
# object.
#
# Plausable values are floating point values between 0 and 0.5. Set to 0
# to disable illumination of the shadow side of an object by a directional
# light.

DIRECTIONAL_LIGHT_SPILL_OVER_FACTOR = 0.1

# SHADOWS determines which shadowing technique is enabled in demos at
# start-up. It only affects the demo program. It can be manually changed
# when running (shadow mapping is only supported with OpenGL). Possible
# values:
#
# <keep blank>          Use default platform setting.
# NONE			No shadows.
# SHADOW_VOLUMES	Optimized shadow volumes.
# SHADOW_MAPPING	Shadow mapping.
#
# When left blank, SHADOW_VOLUMES is the default on the OpenGL platform and
# NONE is the default on GLES2 platforms.

SHADOWS =

# TARGET_CPU defines CPU to optimize for. May be left blank (for example on
# x86). It passes appropriate -mcpu and -mfpu flags to gcc. Supported values:
#
# CORTEX_A7	ARM Cortex-A7 armv7-a CPU cores.
# CORTEX_A8	ARM Cortex-A8 armv7-a CPU cores.
# CORTEX_A9	ARM Cortex-A9 armv7-a CPU cores.
#
# This setting affects both library and back-end/demo compilation.

TARGET_CPU =

# TARGET_SIMD defines the type of SIMD instruction set to use for vector
# math optimizations. It may be left blank fo default settings. Supported values:
#
# X86_SSE2	32-bit x86 processors with SSE2 support. SSE2 is enabled
#		by default on 64-bit x86 platforms.
# X86_SSE3	x86 processors with SSE3 support (most modern CPUs).
# ARM_NEON	ARM Cortex processors with NEON extension (currently not used).
# NONE		Disable the use of SIMD even when it is default platform feature.
#
# This setting affects both library and back-end/demo compilation.

TARGET_SIMD =

# BULLET_PHYSICS defines whether the Bullet game physics library is used
# to provide an interactive environment. Define to YES to enable it, any
# other value to disable. YES is highly advisable, some demos may not
# cleanly compile without it and control is very limited without Bullet.
# The development package of Bullet 2.8x must be installed when this
# option is set to YES.
#
# The bullet support is part of the back-end; the libsre is not affected,
# although Scene class in the libary header file does have some bullet
# function prototypes not referenced within the library itself.

BULLET_PHYSICS = YES

# ASSIMP_SUPPORT defines whether the assimp library is available to load
# models from various file formats. Define to YES to enable it, any other
# value to disable. The development package of assimp 3.x must be installed
# when this option is set to YES.
#
# This setting affects the library.

ASSIMP_SUPPORT = YES

# LIBRARY_CONFIGURATION determines whether a shared or static library will
# be built. Supported values are SHARED, STATIC and DEBUG (static with
# debugging and no optimization).
#
# This only affects libsre (the core rendering library); the back-end is
# always created as a static library (libsrebackend.a) and linked statically
# with the demo program. However, if the library configuration is set to
# DEBUG the demo program and back-end will also be compiled with debugging.
#
# The HEADER_FILE_INSTALL_DIR is the installation directory for library
# header files.
#
# SHARED_LIB_INSTALL_DIR and STATIC_LIB_INSTALL_DIR are the installation
# directories of the shared and static libraries. The target architecture
# triplet string TARGET_MACHINE, obtained from gcc -dumpmachine, may be
# prefixed with /usr/lib to generate a path like /usr/lib/x86_64-gnu-linux.
#
# PKG_CONFIG_INSTALL_DIR is the installation directory of the pkgconfig file
# sre.pc.

LIBRARY_CONFIGURATION = STATIC
HEADER_FILE_INSTALL_DIR = /usr/include
TARGET_MACHINE = `gcc -dumpmachine`
SHARED_LIB_INSTALL_DIR = /usr/lib/$(TARGET_MACHINE)
STATIC_LIB_INSTALL_DIR = /usr/lib/$(TARGET_MACHINE)
PKG_CONFIG_INSTALL_DIR = /usr/lib/$(TARGET_MACHINE)

# SPLASH_SCREEN determines whether a simple splash screen is displayed
# at library initialization. The screen contents will remain on the screen
# until the first screne->Render() call or other use of the SwapBuffers
# function. Possible values:
#
# LOGO		Display SRE logo.
# BLACK		Display blank screen (clear the window).
# NONE		Do not draw into the window during initialization.
#
# This setting affects the library.

SPLASH_SCREEN = LOGO

# Advanced settings:
#
# SHADER_LOADING_MASK is a mask that determines the shaders that will be
# loaded by default when the sreInitialize() function is called. This can
# be overridden at run-time using the sreSetShaderLoadingMask() function.
#
# The following mask bits are defined:
#
# 0x01  The text shader.
# 0x02  The single-pass lighting shaders (about 8).
# 0x04  The multi-pass lighting shaders (about 20).
# 0x08  The shadow volume shader.
# 0x10  The shadow map-generating shaders for directional, spot and beam
#       lights.
# 0x20  The effects shaders (halo and particle system).
# 0x40  The HDR rendering post-processing shaders.
# 0x80  The 2D image shader.
# 0x100 The cube shadow-map-generating shaders for point lights.
#
# A value of SRE_SHADER_MASK_ALL (0x1FF) enables all shaders. This setting
# affects the library.

SHADER_LOADING_MASK = SRE_SHADER_MASK_ALL

# SHADER_PATH determines the directory where libsre will look for
# shader files. This may be an absolute path or a path relative to the
# working directory of the application, which must be enclosed by double
# quotes. The special value NONE causes libsre to never look for shaders
# in the filesystem.
#
# Examples values: "./", "/usr/share/libsre/", NONE

SHADER_PATH = "./"

# SHADERS_BUILTIN determines whether the shaders will be compiled into
# the library image. Set to YES to enable.

SHADERS_BUILTIN = YES

# DEBUG_OPENGL determines whether a few run-time checks for OpenGL errors
# are enabled during actual rendering. Normally these are disabled after
# initialization because they can have a significant performance impact.
# Set to YES to enable.

DEBUG_OPENGL = NO

# DEBUG_RENDER_LOG determines whether informational debugging output is
# generated any time an object is drawn. This quickly amount to large
# amount of text output. The log output is only enabled when the debug
# message level is to 2 (shader changes only) or 3 (full log). Because
# it creates some code overhead (and may impact compiler optimization
# due to printf calls in between code), it is should only be enabled
# for debugging. Set to YES to enable.

DEBUG_RENDER_LOG = NO

