SRE (Shadow Rendering Engine) is a 3D rendering using OpenGL or
OpenGL-ES 2.0 with several device-specific back-ends.

Edit Makefile.conf to edit the configuration. It is possible to
compile the library and demo program without installing by setting
the library configuration to STATIC.

The current version as of March 2014 has been tested and works
correctly with full features with OpenGL on a Linux PC platform,
although it has not been tested much beyond a discrete NVIDIA GPU.
On NVIDIA-based devices, installing NVIDIA's optimized Linux drivers
is highly recommended.

The OpenGL-ES 2.0 X11 back-end compiles and works, although it has
only been tested on a Mali-400 platform. The framebuffer OpenGL-ES
2.0 back-end should also work, and have primarily been tested on
the Raspberry Pi platform.

Running "make" compiles the library. It might be necessary to run
"make rules" beforehand.
Running "make demo" compiles the demo applications, which will be
called sre-demo and game.
Running "make install" (usually as superuser) installs the library
and header file into the directories specified in the configuration
file. Installation is not necessary to compile or run the demo.
Run "make dep" and "make rules" may be necessary after source changes.

The demo program supports a few options, run it without arguments
for help. There are about 15 different demo scenes/tests present,
one of which must be supplied as an argument. For example,
"./sre-demo demo10".

Demos that should work include demo1, demo2, demo5, demo6, demo7, demo8,
demo9, demo10 and demo11.

game is simple game in which a ball must be pushed onto the ground.

textdemo demonstrates the text drawing functions that use a highly
optimized text shader.

Demos that do not work correctly in the current version:

demo3 is a small solar system simulator that is not up-to-date with the
current code base.

demo4/4b/4c is a sophisticated Earth terrain demo that requires
(potentially very large) terrain textures that are not included.

--- Requirements ---

OpenGL or OpenGL-ES 2.0 development libraries need to be installed
in order to compile.

For most practical purposes the game physics library Bullet is
required. It can be disabled but is needed for proper scene
navigation. Recently it has become available on some Debian
repositories (including x86 and armhf). Install the libbullet-dev
package.

Platform-specific development libraries are needed to compile the
back-end. This includes:

- X11 development libraries for pure X11 support (should not be needed
  for GLFW/pure GLUT in X11 environment).
- GFLW development library for GLFW support.
- GLUT/freeglut for GLUT support. The pure OpenGL X11 back-end
  also requires freeglut (for initialization only).
- OpenGL en GLEW development libraries when compiling for OpenGL
  back-ends.
- Device-specific EGL/GLES2 development libraries for OpenGL-ES 2.0
  back-ends.
- Assimp 3.x (asset import library) is required when assimp support
  is enabled, allowing loading many different 3D model file formats.
  In Debian-based distributions, it is available as libassimp-dev.

Another dependency is libpng (development package).

The Makefile uses sed and awk.

--- Shadows ---

SRE support both stencil shadow volumes and shadow mapping. Shadows
are supported for several light types, including directional,
point-source, spotlight and beam lights. Shadow volumes are sharply
defined (it's a geometrical, pixel-precise technique), whereas shadow
mapping may show pixelization in the shadows but is move versatile.

The shadow volumes implementation is highly optimized including a
shadow volume cache as well as geometrical and scissors optimizations
including object (geometry)-based scissors. Moving point source lights
and moving objects near point-source lights can present a problem for
shadow volumes because the CPU has to calculate the silhouettes/shadow
volume every frame; this is mainly a problem when the triangle count
for shadow casting objects is high. In other situation (for example
with a directional light), the shadow cache ensures good peformance.

The shadow mapping implementation uses a regular shadow map with
configurable resolution as well as cube shadow maps for point lights
and spot lights. It is fairly optimized with regard to only rendering
objects that can cast a shadow. There might be some pixelization near
the shadow edges. Increasing the resolution of the shadow map helps
but has limitations. In some cases "shadow acne" may be observed. The
advantage of shadow mapping is that it is much less affected by slow
downs with moving objects near point source lights or moving lights.

--- Models/Objects ---

Several functions that generate models of common geometrical shapes
such as a sphere and a torus and other models are provided by the
library. There is support for combining models into a single model
(compound models). Currently the OBJ format is the only natively
supported model file format that can be read from disk, but optional
use of the Assimp library is supported which allows loading of models
in a plethora of simple and complex formats (including multiple
meshes and model-referenced textures).

- A model (sreModel) is the highest level abstraction of a model.
  Bounding volumes are only defined at this level. The model contains
  references to one or more Level-of-detail models (sreLODModel).

- The LOD (Level-Of-Detail) models defined for a model usually have
  a progressively smaller amount of triangles. As the object's distance
  from the camera viewpoint increases, a less detailed model can be used.
  A LOD model (sreLODModel) contains the actual polygonal model
  consisting of triangles that is uploaded to the GPU.

- A LOD model can have different vertex attributes associated with it:
  position (always enabled), texcoords, normal, tangent, and color 
  special color attribute for each vertex). Models that have texcoords
  can have a texture associated with it (usually not specified in the
  model class but at the higher sreObject level which is an instantion
  of a model). Normals are required for any kind of lighting/reflection
  model. Tangents allow normal mapping, and are also required for certain
  features in the micro-facet reflection model. Most, but not all,
  of the standard objects provided by the library (sphere, torus etc)
  have tangents. It possible to create a model that shares one or more
  vertex attributes with another model.

- When stencil shadow volumes are not globally disabled and the model
  can cast shadows, the sreLODModelShadowVolume class, which is
  derived from sreLODModel, is used.

- An object (sreObject) is an object placed in the scene that refers
  to an sreModel (and subsequently to LOD models) for the object's
  polygonal model. It is possible to create many objects all referring
  to the same model, while only one set of model data is required in
  GPU memory. It is possible to change the scaling and rotation for
  each object individually.

- Object properties can be changed in real-time after initialization;
  the InvalidateShader() function in the sreScene class should be called
  for the object when a shader change is possible. Changing most
  object-specific texture, color or reflection model parameters does
  not require a new shader. However changing the object's flags field
  may require a shader change.

- When the library's initial max capacity for objects, models or lights
  in a scene is reached, the capacity is automatically doubled. That
  means the size of the scene is almost unlimited.

--- Textures ---

Any texture map, normal map, specularity map or emission map
used for an object can be seperately selected for each sreObject, as
long as the LOD model used have texture coordinates. Except in the case
of multi-mesh models with seperate textures for each mesh (a special
case), models have texcoords but do not have texture information;
references to the textures to be used are stored in the object
(sreObject).

Textures can be loaded from PNG, DDS or KTX files and may have alpha
transparency. A limited number of compressed texture formats is
supported.

A UV (texture coordinate) transformation matrix is seperately defined
for every object. By default the standard transformation matrix is used,
whichs flips the V coordinate so that texture position (0, 0) maps to the
top-left corner of the texture in OpenGL shaders.

Models are expected to have texcoords that assume that the top-left corner
of the texture has coordinates of (0, 0). However, a UV transformation
matrix that does not flip the V coordinate can be used.

The UV transformation matrix can be used for any kind of mirroring, and
can also be used to select a region of a texture map that will be mapped
to coordinates ([0,1], [0,1]) in the model. This allows the use of the
same texture atlas (a texture that contains multiple different textures),
even for objects that do not share any texture. This can potentially
improve performance, especially when several small textures are used,
by significantly reducing the number of texture binds for the GPU.

--- Debugging ---

Setting LIBRARY_CONFIGURATION to DEBUG will compile the library and
demo with full debugging and no optimization. gdb can be useful.

For detailed render logs, set DEBUG_RENDER_LOG to YES and run the
demo application with the --debug2 or --debug3 option. This will show
when new shaders are selected for each object (--debug2) or log
every draw request for an object (--debug3).

The debug2/debug3 level corresponds to the message verbosity level;
only messages with a priority smaller or equal to the level are
displayed. The following levels are defined:

    SRE_MESSAGE_ERROR = - 4,
    SRE_MESSAGE_QUIET = - 3,
    SRE_MESSAGE_CRITICAL = - 2,
    SRE_MESSAGE_WARNING = - 1,
    // Priority levels 0 to 3 are information (0 corresponds to the
    // least frequent information that always displayed by default with
    // sre_internal_debug_message_level of 0, level 3 corresponds to very
    // frequent information at logging level).
    SRE_MESSAGE_INFO = 0,
    SRE_MESSAGE_SPARSE_LOG = 1,
    SRE_MESSAGE_LOG = 2,
    SRE_MESSAGE_VERBOSE_LOG = 3

The DEBUG_OPENGL setting can be useful to trace OpenGL-related
errors. It can seriously impact performance by stalling the rendering
pipeline.

--- Issues/limitations/ideas ---

1. Optimizations that are implemented but not yet (fully) tested.

- Interleaved vertex buffer are supported (it may help with some
  lower-end devices like OpenGL-ES 2.0). Not tested yet.

- UV transformation of texture coordinates has not yet been extensively
  tested beyond simple mirroring.

- The sreCreateNewMultiColorModel function implements an example of
  the sharing of attribute data between different models (in this
  example, each model has unique per-vertex color data but shares
  the vertex position, normal and other attributes). This is not yet
  been tested and validated.

2. Current bugs.

Bugs as of July 2014:

- Shadow errors for spotlights in demo1 (incorrect shadow bands) with
  shadow volumes around the central open wall, irrespective of scissors
  settings. The problem is caused by incorrect shadow volume generation
  for compound objects consisting of multiple blocks (which may have
  missing sides). Worked around by avoiding compound objects casting
  shadows.

3. Potential improvements that are not yet implemented.

- There is no real scene graph except for an optimized octree. A
  proper scene graph would allow objects to be grouped together
  and transformations applied to them as a group.

- Support for shadow mapping for OpenGL-ES 2.0 would be possible
  after the handling of shadow map buffers and shadow maps in shaders
  is augmented to be compatible with the features present in OpenGL-ES
  2.0.

- Currently, the shadow mapping implementation uses features that
  are exclusive to OpenGL 3+ and not present in OpenGL-ES 2.0, and
  shadow mapping may also be faster if changed to more widely conform
  to built-in shader language features (the current implementation
  relies on a fair amount of general shader code, which could be
  streamlined by using more of the built-in shadow-map support in
  GLSL).

- An example of optimization of the shadow map shaders (reducing
  conditional execution) is that for cube maps, perhaps the cube
  segments that are applicable for the object can be forwarded to the
  shader in a uniform (the current implementation does some work to
  identify for the segment that the fragment is in).

- RegisterModel() could be enhanced with a name string to more easily
  identify models.

- Shader parameters to apply a special object position transformation
  (beyond simple translation, scaling and rotation) could be added for
  interesting effects, while adding very little extra burden on the
  CPU or GPU, although introducing the use of geometry shaders would
  be more flexible.

- Try font texture stored with only one component, preferably something
  like UINT8, reducing memory requirements and GPU texture cache
  footprint [currently uses one float component].

- Before uploading model triangles to the GPU we should try optimizing
  the triangle layout for cache coherency (keep as many vertices in the
  GPU's cache as possible); triangle fans or strips are probably of
  limited use for general models. Currently, the vertices are sorted
  on one dimension when uploaded to the GPU but GPU cache performance
  is not really taken into account.

- When "primitive restart" is available (modern OpenGL GPUs),
  certain shadow volumes (for point or spotlight with sides only) now use
  triangle strips with a restart token after every two triangles, which
  may be a minor performance gain. More significantly, triangle fans can
  be used for directional/beam lights when only the sides of the shadow
  volume need to be drawn, which can be significantly faster. A further
  optimization by fully reducing the geometry (e.g. reducing the number
  of triangles on the sides of compound objects with block like geometry)
  during edge calculation is work in progress.

- Could create subclasses for sreObject (sreObject) so that the
  minimum number of fields is reduced (e.g. no light parameters for
  non-lit objects, etc). [Similar optimization implemented for
  sreLODModel, but not yet for sreObject]

- A single infinite distance octree could be created, with a limited number
  of subnode levels used to store objects (the very large coordinates used
  for these objects can be handled without much trouble). For example,
  when thousands of stars are defined as infinite distance objects, only
  a subset (with octree nodes intersecting the view frustum) would need
  to be traversed during visible object determination. [done, static
  and dynamic infinite distance octrees created, but only a root node
  for the moment] 

- Allow mixing of stencil shadow volumes and shadow mapping for different
  lights. For example, shadow volumes could be used for a directional
  light (provided there is not a large number of animated objects), while
  shadow mapping could be used for moving lights or when there is a large
  number of animated objects. There should not be any critical obstacle
  against using this technique.

- Shadow volume geometry scissors cache could be implemented (in addition
  to the existing per-object light scissors cache).

- Add demo for beam light testing.

- Given that flexible shader configuration is already supported, it should
  in theory be possible to customize shaders automatically for the objects
  that are present in the scene, loading shaders as needed. Currently, a
  limited number of shaders optimized for a different subset of features
  is used. Performance would be increased.

- Color intensity should be included in light bounding volume calculation.
  A max RGB intensity of 0.5 would result in only half the volume at a
  given RGB intensity cut-off. Conversely, some lights might be created
  with intensities above 1.0 and need larger volumes (although the linear
  range will generally delimit the volume).

- The Pyramid bounding volume, used for point source shadow volumes, has
  been replaced by PyramidCone (with side edges that are all equal in
  length) to reduce computation complexity of the shadow volume. The
  InfinitePyramidBase intersection test (for dark cap using stencil shadow
  volumes) is not fully tested/optimized yet. The SphericalSector used
  for the shadow volume in some cases could be optimized (see also bugs
  above).

- A spherical sector is sometimes used for the shadow volume instead of
  pyramid cone, but the intersection of it infinite projection (dark cap)
  with the frustum is not yet fully implemented. Also, some expensive
  trigonometry operations are used when initializing the spherical sector.

- Scissors calculation of any shadow volume shape other than PyramidCone
  (such as a speherical sector or cylinder) has not yet been implemented.

- Demo generating models of trees (plants) would be fun (producing nice
  shadows).

- The miscellaneous shader class could be optimized with more a more
  compact array of uniform identifiers for each different shader
  (currently, an array of about 20 uniform locations is maintained for
  each shader, only a few of which are used). Most constant definitions
  and some other unused code are already in place for this.

- The worst case bounding volume of the spotlights in demo1 could be
  defined as a spherical sector (it is calculated, but not stored or used
  yet).

- Message priority levels and functions for errors, debugging and logging
  have been introduced. Only part of the code uses this mechanism, some
  parts still uses printf and exit and should be updated.

- Geometry scissors caching and associated overhead could be omitted when
  the frustum is detected to be changing every frame [implemented].

- For spotlights, ideally the spherical sector bounding volume should be
  used for geometry scissors calculation instead of the much large
  cylinder.

- Large-scale normal-mapping causes a noticeable slowdown on some
  OpenGL-ES 2.0 platforms (demo5), probably normal mapping is relatively
  unoptimized in the lighting shaders (it passes a matrix as
  interpolated value, and is not a full tangent-space implementation;
  multiple normalizations may play a role). This should be optimized.
  Using smaller, ETC1-compressed normal maps helps.

- The calculation of the intersection of an object that is partially within
  a light volume during geometry scissors calculation could be precalculated
  for a static object within a static light volume.

- Investigate why octree creation results in 2500 objects (blue fields,
  also small lightscape lights) in the same node in demo8. This may
  already be fixed because of bug fixes in octree smallest dimension
  displacement algorithm during octree creation.

--- LICENSE --

The code is licensed under the ISC license, except for the Linux console
mouse queue code implementation.

Copyright (c) 2014 Harm Hanemaaijer <fgenfb@yahoo.com>

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

The Linux console mouse queue code, which is only used for Linux
framebuffer (non-X) console back-ends, was obtained from the internet
in 2012 and is copyrighted by VirtualCode.es / David Crespo under the
Apache License 2.0, a copy of which is provided in the file
LICENSE.LinuxMouseQueue.

Some of the demo scenes utilitize textures created by borysses on
deviantart.com.

elephant.obj (used in demo2) and venusm.obj (demo11) are models obtained
from the internet.

The vector and matrix class libraries are derived from those provided with
the book "Mathematics for 3D Game Programming and Computer Graphics" by
Eric Lengyel (http://www.mathfor3dgameprogramming.com), and several
mathematical, geometrical and rendering techniques described in the book
are adopted in the engine code.
